//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class LogWrapperWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("LogWrapper");
		L.RegFunction("Args2Str", Args2Str);
		L.RegFunction("SetLevel", SetLevel);
		L.RegFunction("GetLevel", GetLevel);
		L.RegFunction("SetPath", SetPath);
		L.RegFunction("GetPath", GetPath);
		L.RegFunction("SetConsole", SetConsole);
		L.RegFunction("GetConsole", GetConsole);
		L.RegFunction("SetKey", SetKey);
		L.RegFunction("GetKey", GetKey);
		L.RegFunction("ResetKeys", ResetKeys);
		L.RegFunction("LogTrace", LogTrace);
		L.RegFunction("LogDebug", LogDebug);
		L.RegFunction("LogInfo", LogInfo);
		L.RegFunction("LogWarning", LogWarning);
		L.RegFunction("LogError", LogError);
		L.RegFunction("LogFatal", LogFatal);
		L.RegFunction("LogAssert", LogAssert);
		L.RegFunction("LogException", LogException);
		L.RegFunction("LogKey", LogKey);
		L.RegFunction("LogProf", LogProf);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Args2Str(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			object[] arg0 = ToLua.ToParamsObject(L, 1, count);
			string o = LogWrapper.Args2Str(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetLevel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			bool o = LogWrapper.SetLevel(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetLevel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			string o = LogWrapper.GetLevel();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			bool o = LogWrapper.SetPath(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			string o = LogWrapper.GetPath();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetConsole(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 1);
			LogWrapper.SetConsole(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetConsole(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			bool o = LogWrapper.GetConsole();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetKey(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
			bool o = LogWrapper.SetKey(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetKey(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			bool o = LogWrapper.GetKey(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ResetKeys(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			LogWrapper.ResetKeys();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LogTrace(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<string>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				LogWrapper.LogTrace(arg0);
				return 0;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.Func<string>>(L, 1))
			{
				System.Func<string> arg0 = (System.Func<string>)ToLua.ToObject(L, 1);
				LogWrapper.LogTrace(arg0);
				return 0;
			}
			else if (TypeChecker.CheckParamsType<object>(L, 1, count))
			{
				object[] arg0 = ToLua.ToParamsObject(L, 1, count);
				LogWrapper.LogTrace(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LogWrapper.LogTrace");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LogDebug(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<string>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				LogWrapper.LogDebug(arg0);
				return 0;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.Func<string>>(L, 1))
			{
				System.Func<string> arg0 = (System.Func<string>)ToLua.ToObject(L, 1);
				LogWrapper.LogDebug(arg0);
				return 0;
			}
			else if (TypeChecker.CheckParamsType<object>(L, 1, count))
			{
				object[] arg0 = ToLua.ToParamsObject(L, 1, count);
				LogWrapper.LogDebug(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LogWrapper.LogDebug");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LogInfo(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<string>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				LogWrapper.LogInfo(arg0);
				return 0;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.Func<string>>(L, 1))
			{
				System.Func<string> arg0 = (System.Func<string>)ToLua.ToObject(L, 1);
				LogWrapper.LogInfo(arg0);
				return 0;
			}
			else if (TypeChecker.CheckParamsType<object>(L, 1, count))
			{
				object[] arg0 = ToLua.ToParamsObject(L, 1, count);
				LogWrapper.LogInfo(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LogWrapper.LogInfo");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LogWarning(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<string>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				LogWrapper.LogWarning(arg0);
				return 0;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.Func<string>>(L, 1))
			{
				System.Func<string> arg0 = (System.Func<string>)ToLua.ToObject(L, 1);
				LogWrapper.LogWarning(arg0);
				return 0;
			}
			else if (TypeChecker.CheckParamsType<object>(L, 1, count))
			{
				object[] arg0 = ToLua.ToParamsObject(L, 1, count);
				LogWrapper.LogWarning(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LogWrapper.LogWarning");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LogError(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<string>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				LogWrapper.LogError(arg0);
				return 0;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.Func<string>>(L, 1))
			{
				System.Func<string> arg0 = (System.Func<string>)ToLua.ToObject(L, 1);
				LogWrapper.LogError(arg0);
				return 0;
			}
			else if (TypeChecker.CheckParamsType<object>(L, 1, count))
			{
				object[] arg0 = ToLua.ToParamsObject(L, 1, count);
				LogWrapper.LogError(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LogWrapper.LogError");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LogFatal(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<string>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				LogWrapper.LogFatal(arg0);
				return 0;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.Func<string>>(L, 1))
			{
				System.Func<string> arg0 = (System.Func<string>)ToLua.ToObject(L, 1);
				LogWrapper.LogFatal(arg0);
				return 0;
			}
			else if (TypeChecker.CheckParamsType<object>(L, 1, count))
			{
				object[] arg0 = ToLua.ToParamsObject(L, 1, count);
				LogWrapper.LogFatal(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LogWrapper.LogFatal");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LogAssert(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				bool arg0 = LuaDLL.luaL_checkboolean(L, 1);
				LogWrapper.LogAssert(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				bool arg0 = LuaDLL.luaL_checkboolean(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				LogWrapper.LogAssert(arg0, arg1);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Func<string>>(L, 2))
			{
				bool arg0 = LuaDLL.luaL_checkboolean(L, 1);
				System.Func<string> arg1 = (System.Func<string>)ToLua.ToObject(L, 2);
				LogWrapper.LogAssert(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LogWrapper.LogAssert");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LogException(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Exception arg0 = (System.Exception)ToLua.CheckObject<System.Exception>(L, 1);
			LogWrapper.LogException(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LogKey(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				LogWrapper.LogKey(arg0, arg1);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Func<string>>(L, 2))
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.Func<string> arg1 = (System.Func<string>)ToLua.ToObject(L, 2);
				LogWrapper.LogKey(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LogWrapper.LogKey");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LogProf(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<string>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				LogWrapper.LogProf(arg0);
				return 0;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.Func<string>>(L, 1))
			{
				System.Func<string> arg0 = (System.Func<string>)ToLua.ToObject(L, 1);
				LogWrapper.LogProf(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LogWrapper.LogProf");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

